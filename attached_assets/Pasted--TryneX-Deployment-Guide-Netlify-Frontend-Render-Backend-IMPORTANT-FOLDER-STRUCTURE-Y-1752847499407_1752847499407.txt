
# TryneX Deployment Guide - Netlify (Frontend) + Render (Backend)

## IMPORTANT FOLDER STRUCTURE:
Your project has this structure:
- /client (Frontend - React/Vite) → Deploy to NETLIFY
- /server (Backend - Express/Node.js) → Deploy to RENDER
- /shared (Shared types) → Include with backend
- /public (Static assets) → Include with frontend

## STEP 1: PREPARE YOUR GITHUB REPOSITORY

1. Create a new GitHub repository
2. Push your entire project to GitHub:
   ```
   git add .
   git commit -m "Initial commit for deployment"
   git push origin main
   ```

## STEP 2: NETLIFY DEPLOYMENT (FRONTEND)

### A. Create Netlify Account & Connect GitHub:
1. Go to https://netlify.com and sign up
2. Click "New site from Git"
3. Choose GitHub and authorize Netlify
4. Select your TryneX repository

### B. Configure Build Settings:
- **Base directory:** client
- **Build command:** npm run build
- **Publish directory:** dist/public
- **Node version:** 18

### C. Environment Variables (in Netlify dashboard):
```
NODE_ENV=production
VITE_GA_MEASUREMENT_ID=G-22BF5BGNSX
VITE_API_URL=https://your-backend-url.onrender.com
```

### D. Custom Build Command (Advanced Settings):
```
cd client && npm install && npm run build
```

### E. Redirects Configuration:
Your netlify.toml is already configured correctly! ✓

## STEP 3: RENDER DEPLOYMENT (BACKEND)

### A. Create Render Account:
1. Go to https://render.com and sign up
2. Connect your GitHub account
3. Click "New +" → "Web Service"

### B. Configure Service:
- **Repository:** Your TryneX repo
- **Root Directory:** . (leave empty for root)
- **Runtime:** Node
- **Build Command:** npm install && npm run build
- **Start Command:** npm run start

### C. Environment Variables in Render:
```
NODE_ENV=production
PORT=10000
DATABASE_URL=your_postgres_connection_string
```

### D. Database Setup:
1. In Render dashboard, create PostgreSQL database
2. Copy the Internal Database URL
3. Add it as DATABASE_URL environment variable

## STEP 4: UPDATE FRONTEND API CALLS

After backend is deployed, update your frontend:

1. Get your Render backend URL (e.g., https://trynex-backend.onrender.com)
2. In Netlify environment variables, set:
   ```
   VITE_API_URL=https://your-actual-backend-url.onrender.com
   ```

## STEP 5: CORS CONFIGURATION

Your backend needs CORS for Netlify domain. In server/index.ts, ensure:
```javascript
app.use(cors({
  origin: ['https://your-netlify-domain.netlify.app', 'http://localhost:5173'],
  credentials: true
}));
```

## DEPLOYMENT CHECKLIST:

### ✅ NETLIFY (Frontend):
- [ ] Repository connected
- [ ] Build command: npm run build
- [ ] Base directory: client
- [ ] Publish directory: dist/public
- [ ] Environment variables added
- [ ] Domain configured

### ✅ RENDER (Backend):
- [ ] Repository connected
- [ ] Build command: npm install && npm run build
- [ ] Start command: npm run start
- [ ] PostgreSQL database created
- [ ] Environment variables added
- [ ] CORS configured for Netlify domain

## ESTIMATED COSTS:
- **Netlify:** Free tier (100GB bandwidth)
- **Render:** $7/month for web service + $7/month for PostgreSQL

## IMPORTANT NOTES:

1. **Free Tier Limitations:**
   - Render free services sleep after 15 minutes of inactivity
   - Cold starts can take 30+ seconds
   - Upgrade to paid for production use

2. **Database Connection:**
   - Use Render's PostgreSQL internal URL for better performance
   - Configure connection pooling in production

3. **SSL Certificates:**
   - Both Netlify and Render provide free SSL
   - Your site will have HTTPS automatically

4. **Custom Domains:**
   - Configure in respective dashboards
   - Update DNS records as instructed

## TROUBLESHOOTING:

### Build Fails on Netlify:
- Check Node version (use 18.x)
- Ensure client/package.json exists
- Verify build command runs locally in client folder

### Backend Issues on Render:
- Check logs in Render dashboard
- Verify environment variables
- Test database connection

### API Connection Issues:
- Verify VITE_API_URL in Netlify env vars
- Check CORS configuration
- Test API endpoints directly

## POST-DEPLOYMENT:
1. Test all features end-to-end
2. Configure domain names
3. Set up monitoring/analytics
4. Configure backup strategies
5. Set up CI/CD for automatic deployments